pipeline {
    agent any

    environment {
        DOCKER_REPO = 'felpsxill/malware-app'
        MYSQL_REPO = 'felpsxill/malware-app'
        FRONTEND_DIR = 'Frontend'
        BACKEND_DIR = 'Backend'
        MYSQL_DIR = 'Mysql'
        K8S_DIR = 'k8s'
    }

    stages {
        stage('Initialize Pipeline') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '6b0d0883-8a06-4db0-b0ea-a0248eae5876', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                    }
                }
            }
        }

        stage('Build and Push Frontend') {
            steps {
                dir(FRONTEND_DIR) {
                    script {
                        // Build frontend Docker image with 'latest' tag
                        sh "docker build --no-cache -t ${DOCKER_REPO}:frontend-latest -f Dockerfile ."
                        // Push frontend Docker image with 'latest' tag
                        sh "docker push ${DOCKER_REPO}:frontend-latest"
                    }
                }
            }
        }

        stage('Build and Push Backend') {
            steps {
                dir(BACKEND_DIR) {
                    script {
                        // Build backend Docker image with 'latest' tag
                        sh "docker build --no-cache -t ${DOCKER_REPO}:backend-latest -f Dockerfile ."
                        // Push backend Docker image with 'latest' tag
                        sh "docker push ${DOCKER_REPO}:backend-latest"
                    }
                }
            }
        }

        stage('Build and Push MySQL Image') {
            steps {
                dir(MYSQL_DIR) {
                    script {
                        // Using credentials for MySQL configuration
                        withCredentials([
                            string(credentialsId: 'MYSQL_USER_ID', variable: 'MYSQL_USER'),
                            string(credentialsId: 'MYSQL_PASSWORD_ID', variable: 'MYSQL_PASSWORD'),
                            string(credentialsId: 'MYSQL_ROOT_PASSWORD_ID', variable: 'MYSQL_ROOT_PASSWORD')
                        ]) {
                            // Build MySQL Docker image with 'latest' tag
                            sh "docker build --no-cache --build-arg MYSQL_USER_ARG=${MYSQL_USER} --build-arg MYSQL_PASSWORD_ARG=${MYSQL_PASSWORD} --build-arg MYSQL_ROOT_PASSWORD_ARG=${MYSQL_ROOT_PASSWORD} -t ${MYSQL_REPO}:mysql-latest -f Dockerfile ."
                            // Push MySQL Docker image with 'latest' tag
                            sh "docker push ${MYSQL_REPO}:mysql-latest"
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        // Ensure Kubernetes is properly configured with the credentials
                        withCredentials([file(credentialsId: '7e2b1354-0f09-450c-9117-01d55771317b', variable: 'KUBECONFIG')]) {
                            // Apply MySQL Persistent Volume Claim (PVC)
                            sh "microk8s kubectl apply -f ${K8S_DIR}/mysql-pvc.yaml"
                            
                            // Deploy MySQL
                            sh "microk8s kubectl apply -f ${K8S_DIR}/deployment-mdb.yaml"
                            
                            // Deploy Backend
                            sh "microk8s kubectl apply -f ${K8S_DIR}/deployment-be.yaml"
                            sh "microk8s kubectl apply -f ${K8S_DIR}/service-be.yaml"

                            // Deploy Frontend
                            sh "microk8s kubectl apply -f ${K8S_DIR}/deployment-fe.yaml"
                            sh "microk8s kubectl apply -f ${K8S_DIR}/service-fe.yaml"
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
        }
    }
}
