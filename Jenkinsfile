pipeline {
    agent any

    environment {
        DOCKER_REPO = 'felpsxill/malware-app'
        MYSQL_REPO = 'felpsxill/malware-mysql'  
        FRONTEND_DIR = 'Frontend'
        BACKEND_DIR = 'Backend'
        MYSQL_DIR = 'Mysql'  
        K8S_DIR = 'k8s'
    }

    stages {
        stage('Inicializando Pipeline') {
            steps {
                checkout scm
            }
        }

        stage('Build Frontend') {
            steps {
                dir(FRONTEND_DIR) {
                    script {
                        sh "docker build --no-cache -t ${DOCKER_REPO}:frontend-latest -f Dockerfile ."
                    }
                }
            }
        }

        stage('Push Frontend to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '6b0d0883-8a06-4db0-b0ea-a0248eae5876', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                        sh "docker push ${DOCKER_REPO}:frontend-latest"
                    }
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir(BACKEND_DIR) {
                    script {
                        sh "docker build --no-cache -t ${DOCKER_REPO}:backend-latest -f Dockerfile ."
                    }
                }
            }
        }

        stage('Push Backend to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '6b0d0883-8a06-4db0-b0ea-a0248eae5876', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                        sh "docker push ${DOCKER_REPO}:backend-latest"
                    }
                }
            }
        }

        stage('Build MySQL Image') {
            steps {
                dir(MYSQL_DIR) {
                    script {
                        sh "docker build --no-cache -t ${MYSQL_REPO}:latest -f Dockerfile ."
                    }
                }
            }
        }

        stage('Push MySQL to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '6b0d0883-8a06-4db0-b0ea-a0248eae5876', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                        sh "docker push ${MYSQL_REPO}:latest"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Aplicar PVC do MySQL
                    sh "kubectl apply -f ${K8S_DIR}/mysql-pvc.yaml"
                    
                    // Deploy do MySQL
                    sh "kubectl apply -f ${K8S_DIR}/deployment-mysql.yaml"

                    // Deploy do Backend
                    sh "kubectl apply -f ${K8S_DIR}/deployment-be.yaml"
                    sh "kubectl apply -f ${K8S_DIR}/service-be.yaml"

                    // Deploy do Frontend
                    sh "kubectl apply -f ${K8S_DIR}/deployment-fe.yaml"
                    sh "kubectl apply -f ${K8S_DIR}/service-fe.yaml"
                }
            }
        }
    }

    post {
        always {
            echo 'Limpando...'
            cleanWs()
        }
    }
}
