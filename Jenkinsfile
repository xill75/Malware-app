pipeline {
    agent any

    environment {
        DOCKER_REPO = 'felpsxill/malware-app'
        MYSQL_REPO = 'felpsxill/malware-app'  
        FRONTEND_DIR = 'Frontend'
        BACKEND_DIR = 'Backend'
        MYSQL_DIR = 'Mysql'  
        K8S_DIR = 'k8s'
    }

    stages {
        stage('Initialize Pipeline') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '6b0d0883-8a06-4db0-b0ea-a0248eae5876', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                    }
                }
            }
        }

        stage('Build and Push MySQL Image') {
            steps {
                dir(MYSQL_DIR) {
                    script {
                        withCredentials([
                            string(credentialsId: '6b0d0883-8a06-4db0-b0ea-a0248eae5876', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')
                            string(credentialsId: 'MYSQL_USER_ID', variable: 'MYSQL_USER'),
                            string(credentialsId: 'MYSQL_PASSWORD_ID', variable: 'MYSQL_PASSWORD'),
                            string(credentialsId: 'MYSQL_ROOT_PASSWORD_ID', variable: 'MYSQL_ROOT_PASSWORD')
                        ]) {
                            sh """
                            docker login -u $DOCKER_USER -p $DOCKER_PASS
                            docker build --no-cache -t felpsxill/malware-app:mysql-latest \
                                --build-arg MYSQL_USER_ARG=${MYSQL_USER} \
                                --build-arg MYSQL_PASSWORD_ARG=${MYSQL_PASSWORD} \
                                --build-arg MYSQL_ROOT_PASSWORD_ARG=${MYSQL_ROOT_PASSWORD} \
                                -f Dockerfile .
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: '7e2b1354-0f09-450c-9117-01d55771317b', variable: 'KUBECONFIG')]) {
            
                        sh "microk8s kubectl apply -f ${K8S_DIR}/mysql-pvc.yaml"
                        
                        
                        sh "microk8s kubectl apply -f ${K8S_DIR}/deployment-mdb.yaml"
                       

                        sh "microk8s kubectl apply -f ${K8S_DIR}/deployment-be.yaml"
                        sh "microk8s kubectl apply -f ${K8S_DIR}/service-be.yaml"

                        
                        sh "microk8s kubectl apply -f ${K8S_DIR}/deployment-fe.yaml"
                        sh "microk8s kubectl apply -f ${K8S_DIR}/service-fe.yaml"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
        }
    }
}
